//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputAsset/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""b86d67bd-b4e5-4326-8897-43fef98c4c28"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""7ed4b014-7f3d-4bcb-bc90-a412760ffc16"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d7a9bac0-eb52-4bc0-8adb-4688395efe34"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6785b8ed-5340-4508-8102-b087f2b22c7b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1b4a9af3-62df-48ff-bffb-a65010688746"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""47c925df-aff6-487a-9635-81a52b7ec3cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0fd92580-742e-4d75-b71c-ac113c7287d7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""d56c56f6-cf80-42b6-8c76-d49d9acd2358"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5066c9eb-508b-4780-91ba-71365940350e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4e93d130-a3bb-44d8-af76-e0c3d55f8a57"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eab604ea-11bf-4759-92bf-640199fd3f20"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5896cfc-cde4-41fd-a037-2d2276363251"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""46702a75-5842-4891-9ade-5e2a50a0fe0c"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""a6c947c7-bd63-4a3b-89c7-ac64bb5953fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bad728a-f736-490a-a753-18af17da1d89"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04037e42-432d-477a-be45-562501ff9aff"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dash"",
            ""id"": ""ef16151e-70d4-449f-b4c0-454a7595ab66"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ff3ec96d-8844-475a-97c7-4cf55eb78731"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""545b41e7-421e-4fe1-95ce-e50445cce25f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""640e10be-62ea-46aa-b470-11c697a6fbf2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fcc7772-775f-4916-b89a-8ddb6abb45a4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {

            ""name"": ""Hotbar"",
            ""id"": ""0e7e9c58-2d97-43ef-a495-154080bb7dc8"",
            ""actions"": [
                {
                    ""name"": ""1st slot"",
                    ""type"": ""Button"",
                    ""id"": ""e728a930-1039-4889-b8fd-2f507310f9d4"",

                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {

                    ""name"": ""2nd slot"",
                    ""type"": ""Button"",
                    ""id"": ""5c3461b8-4735-4b06-9d84-6520c15d0628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""3rd slot"",
                    ""type"": ""Button"",
                    ""id"": ""0d2b1275-918d-4c2a-a2be-1107ba13fde2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""4th slot"",
                    ""type"": ""Button"",
                    ""id"": ""016df86a-c607-4de6-89d9-031d986787f9"",

                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d0b994e-f85b-442e-b318-92ecfe16e24c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1st slot"",

                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f9c9688-5171-465c-bf02-d16acae56e81"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""2nd slot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f24788aa-5541-4144-b300-56b2ebb8d838"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""3rd slot"",

                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d8d89f2-26d6-460e-b41b-eb0afb42ee0a"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""4th slot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UsePoution"",
            ""id"": ""4ebe9a21-8cca-421e-84d4-d8976ce8bc93"",
            ""actions"": [
                {
                    ""name"": ""UsePotion"",
                    ""type"": ""Button"",
                    ""id"": ""fd6d9092-881b-4702-9939-0706311e880f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbdb9f36-deef-4278-9f9c-4109a7653db7"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryBtns"",
            ""id"": ""73b25e44-11d7-4211-95d8-89d412817fbc"",
            ""actions"": [
                {
                    ""name"": ""OpenAndClose"",
                    ""type"": ""Button"",
                    ""id"": ""52308eba-f677-4c70-99b0-7edbc0b68f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a899951e-636d-4352-bd16-1a1f9c2a0c2c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenAndClose"",

                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walk = m_Movement.FindAction("Walk", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Attack = m_Attack.FindAction("Attack", throwIfNotFound: true);
        // Dash
        m_Dash = asset.FindActionMap("Dash", throwIfNotFound: true);
        m_Dash_Dash = m_Dash.FindAction("Dash", throwIfNotFound: true);

        // Hotbar
        m_Hotbar = asset.FindActionMap("Hotbar", throwIfNotFound: true);
        m_Hotbar__1stslot = m_Hotbar.FindAction("1st slot", throwIfNotFound: true);
        m_Hotbar__2ndslot = m_Hotbar.FindAction("2nd slot", throwIfNotFound: true);
        m_Hotbar__3rdslot = m_Hotbar.FindAction("3rd slot", throwIfNotFound: true);
        m_Hotbar__4thslot = m_Hotbar.FindAction("4th slot", throwIfNotFound: true);
        // UsePoution
        m_UsePoution = asset.FindActionMap("UsePoution", throwIfNotFound: true);
        m_UsePoution_UsePotion = m_UsePoution.FindAction("UsePotion", throwIfNotFound: true);
        // InventoryBtns
        m_InventoryBtns = asset.FindActionMap("InventoryBtns", throwIfNotFound: true);
        m_InventoryBtns_OpenAndClose = m_InventoryBtns.FindAction("OpenAndClose", throwIfNotFound: true);

    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Walk;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Movement_Walk;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
    private readonly InputAction m_Attack_Attack;
    public struct AttackActions
    {
        private @PlayerInput m_Wrapper;
        public AttackActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Attack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void AddCallbacks(IAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IAttackActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // Dash
    private readonly InputActionMap m_Dash;
    private List<IDashActions> m_DashActionsCallbackInterfaces = new List<IDashActions>();
    private readonly InputAction m_Dash_Dash;
    public struct DashActions
    {
        private @PlayerInput m_Wrapper;
        public DashActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_Dash_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Dash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DashActions set) { return set.Get(); }
        public void AddCallbacks(IDashActions instance)
        {
            if (instance == null || m_Wrapper.m_DashActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DashActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IDashActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IDashActions instance)
        {
            if (m_Wrapper.m_DashActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDashActions instance)
        {
            foreach (var item in m_Wrapper.m_DashActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DashActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DashActions @Dash => new DashActions(this);


    // Hotbar
    private readonly InputActionMap m_Hotbar;
    private List<IHotbarActions> m_HotbarActionsCallbackInterfaces = new List<IHotbarActions>();
    private readonly InputAction m_Hotbar__1stslot;
    private readonly InputAction m_Hotbar__2ndslot;
    private readonly InputAction m_Hotbar__3rdslot;
    private readonly InputAction m_Hotbar__4thslot;
    public struct HotbarActions
    {
        private @PlayerInput m_Wrapper;
        public HotbarActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @_1stslot => m_Wrapper.m_Hotbar__1stslot;
        public InputAction @_2ndslot => m_Wrapper.m_Hotbar__2ndslot;
        public InputAction @_3rdslot => m_Wrapper.m_Hotbar__3rdslot;
        public InputAction @_4thslot => m_Wrapper.m_Hotbar__4thslot;
        public InputActionMap Get() { return m_Wrapper.m_Hotbar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotbarActions set) { return set.Get(); }
        public void AddCallbacks(IHotbarActions instance)
        {
            if (instance == null || m_Wrapper.m_HotbarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HotbarActionsCallbackInterfaces.Add(instance);
            @_1stslot.started += instance.On_1stslot;
            @_1stslot.performed += instance.On_1stslot;
            @_1stslot.canceled += instance.On_1stslot;
            @_2ndslot.started += instance.On_2ndslot;
            @_2ndslot.performed += instance.On_2ndslot;
            @_2ndslot.canceled += instance.On_2ndslot;
            @_3rdslot.started += instance.On_3rdslot;
            @_3rdslot.performed += instance.On_3rdslot;
            @_3rdslot.canceled += instance.On_3rdslot;
            @_4thslot.started += instance.On_4thslot;
            @_4thslot.performed += instance.On_4thslot;
            @_4thslot.canceled += instance.On_4thslot;
        }

        private void UnregisterCallbacks(IHotbarActions instance)
        {
            @_1stslot.started -= instance.On_1stslot;
            @_1stslot.performed -= instance.On_1stslot;
            @_1stslot.canceled -= instance.On_1stslot;
            @_2ndslot.started -= instance.On_2ndslot;
            @_2ndslot.performed -= instance.On_2ndslot;
            @_2ndslot.canceled -= instance.On_2ndslot;
            @_3rdslot.started -= instance.On_3rdslot;
            @_3rdslot.performed -= instance.On_3rdslot;
            @_3rdslot.canceled -= instance.On_3rdslot;
            @_4thslot.started -= instance.On_4thslot;
            @_4thslot.performed -= instance.On_4thslot;
            @_4thslot.canceled -= instance.On_4thslot;
        }

        public void RemoveCallbacks(IHotbarActions instance)
        {
            if (m_Wrapper.m_HotbarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHotbarActions instance)
        {
            foreach (var item in m_Wrapper.m_HotbarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HotbarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HotbarActions @Hotbar => new HotbarActions(this);

    // UsePoution
    private readonly InputActionMap m_UsePoution;
    private List<IUsePoutionActions> m_UsePoutionActionsCallbackInterfaces = new List<IUsePoutionActions>();
    private readonly InputAction m_UsePoution_UsePotion;
    public struct UsePoutionActions
    {
        private @PlayerInput m_Wrapper;
        public UsePoutionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UsePotion => m_Wrapper.m_UsePoution_UsePotion;
        public InputActionMap Get() { return m_Wrapper.m_UsePoution; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UsePoutionActions set) { return set.Get(); }
        public void AddCallbacks(IUsePoutionActions instance)
        {
            if (instance == null || m_Wrapper.m_UsePoutionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UsePoutionActionsCallbackInterfaces.Add(instance);
            @UsePotion.started += instance.OnUsePotion;
            @UsePotion.performed += instance.OnUsePotion;
            @UsePotion.canceled += instance.OnUsePotion;
        }

        private void UnregisterCallbacks(IUsePoutionActions instance)
        {
            @UsePotion.started -= instance.OnUsePotion;
            @UsePotion.performed -= instance.OnUsePotion;
            @UsePotion.canceled -= instance.OnUsePotion;
        }

        public void RemoveCallbacks(IUsePoutionActions instance)
        {
            if (m_Wrapper.m_UsePoutionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUsePoutionActions instance)
        {
            foreach (var item in m_Wrapper.m_UsePoutionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UsePoutionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UsePoutionActions @UsePoution => new UsePoutionActions(this);

    // InventoryBtns
    private readonly InputActionMap m_InventoryBtns;
    private List<IInventoryBtnsActions> m_InventoryBtnsActionsCallbackInterfaces = new List<IInventoryBtnsActions>();
    private readonly InputAction m_InventoryBtns_OpenAndClose;
    public struct InventoryBtnsActions
    {
        private @PlayerInput m_Wrapper;
        public InventoryBtnsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenAndClose => m_Wrapper.m_InventoryBtns_OpenAndClose;
        public InputActionMap Get() { return m_Wrapper.m_InventoryBtns; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryBtnsActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryBtnsActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryBtnsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryBtnsActionsCallbackInterfaces.Add(instance);
            @OpenAndClose.started += instance.OnOpenAndClose;
            @OpenAndClose.performed += instance.OnOpenAndClose;
            @OpenAndClose.canceled += instance.OnOpenAndClose;
        }

        private void UnregisterCallbacks(IInventoryBtnsActions instance)
        {
            @OpenAndClose.started -= instance.OnOpenAndClose;
            @OpenAndClose.performed -= instance.OnOpenAndClose;
            @OpenAndClose.canceled -= instance.OnOpenAndClose;
        }

        public void RemoveCallbacks(IInventoryBtnsActions instance)
        {
            if (m_Wrapper.m_InventoryBtnsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryBtnsActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryBtnsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryBtnsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryBtnsActions @InventoryBtns => new InventoryBtnsActions(this);

    public interface IMovementActions
    {
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IDashActions
    {
        void OnDash(InputAction.CallbackContext context);
    }

    public interface IHotbarActions
    {
        void On_1stslot(InputAction.CallbackContext context);
        void On_2ndslot(InputAction.CallbackContext context);
        void On_3rdslot(InputAction.CallbackContext context);
        void On_4thslot(InputAction.CallbackContext context);
    }
    public interface IUsePoutionActions
    {
        void OnUsePotion(InputAction.CallbackContext context);
    }
    public interface IInventoryBtnsActions
    {
        void OnOpenAndClose(InputAction.CallbackContext context);

    }
}
